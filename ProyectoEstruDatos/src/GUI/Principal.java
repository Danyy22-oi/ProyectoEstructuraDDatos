
package GUI;

import Node.*;
import personajes.*;
import EstructuraDeDatos.*;
import java.awt.Image;
import javax.swing.JOptionPane;


public class Principal extends javax.swing.JFrame {
    String nombre;
    private int unidadesDesplegadas = 0;
    private int ronda = 0;
    ListaCircular listaC = new ListaCircular();
    ListaCircularCPU listaCCPU = new ListaCircularCPU();
    ColaJugadorDerecha colaDer = new ColaJugadorDerecha();
    ColaJugadorIzquierda colaIzq = new ColaJugadorIzquierda();
    ColaCPUDerecha colaCPUD = new ColaCPUDerecha();
    ColaCPUIzquierda colaCPUI = new ColaCPUIzquierda();
    
    
    

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
   
    }
    public Image getCabezaImage() {
        if (nombre.equals("piedra")) {
            return colaIzq.getCabeza().getImagePiedra();
        } else if (tipo.equals("papel")) {
            return colaJugador.getCabeza().getImagePapel();
        } else if (tipo.equals("tijera")) {
            return colaJugador.getCabeza().getImageTijera();
        } else {
            return null; // Manejar el caso en que el tipo sea inválido
        }
    }
    
    
    public void reiniciar(){
        //reiniciar las listas
    }
    
    private void agregarUnidadesAleatoriasCPU(){
        int cantidadPersonajes = 3;
        int numColaIzq = 0;
        int numColaDer = 0;
        for (int i = 0; i < cantidadPersonajes; i++) {
            int tipoPersonaje = (int) (Math.random() * 3) + 1; // Genera un número aleatorio entre 1 y 3
            switch (tipoPersonaje) {
                case 1: // Arquero
                    listaCCPU.agregar(new Personaje("Arquero", 1.0, "Roca"));
                    break;
                case 2: // Caballero
                    listaCCPU.agregar(new Personaje("Caballero", 2.0, "Papel"));
                    break;
                case 3: // Mago
                    listaCCPU.agregar(new Personaje("Mago", 1.5, "Tijera"));
                    break;
        }
            int Seleccion = (int) (Math.random() * 2);  //Genera un número aleatorio entre 0 y 1
            if (Seleccion == 0 && numColaIzq < 2){
                Personaje eliminado = listaCCPU.eliminarPrimero();
                if (eliminado == null){
                    JOptionPane.showMessageDialog(null, "La lista esta vacia");
                } else {
                    colaCPUI.encolar(eliminado);
                    numColaIzq++;
                }
            } else if(Seleccion == 1 && numColaDer < 2) {
                Personaje eliminado = listaCCPU.eliminarPrimero();
                if (eliminado == null){
                    JOptionPane.showMessageDialog(null, "La lista esta vacia");
                } else {
                    colaCPUD.encolar(eliminado);
                    numColaDer++;
                }
            }
            colaCPUD.imprimir();
            colaCPUI.imprimir();
            listaCCPU.imprimir(); 
        }       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Derecha = new javax.swing.JButton();
        ContinuarB = new javax.swing.JButton();
        ArqueroB = new javax.swing.JButton();
        MagoB = new javax.swing.JButton();
        CaballeroB = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Derecha.setText("CAMINOS");
        Derecha.setToolTipText("");
        Derecha.setBorderPainted(false);
        Derecha.setDoubleBuffered(true);
        Derecha.setFocusCycleRoot(true);
        Derecha.setFocusPainted(false);
        Derecha.setFocusable(false);
        Derecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DerechaActionPerformed(evt);
            }
        });
        getContentPane().add(Derecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 420, 170, 20));

        ContinuarB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Multimedia/Captura de pantalla 2023-04-21 024047.png"))); // NOI18N
        ContinuarB.setBorderPainted(false);
        ContinuarB.setContentAreaFilled(false);
        ContinuarB.setDefaultCapable(false);
        ContinuarB.setFocusPainted(false);
        ContinuarB.setFocusable(false);
        ContinuarB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContinuarBActionPerformed(evt);
            }
        });
        getContentPane().add(ContinuarB, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 450, 90, 20));

        ArqueroB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Multimedia/Arquero.png"))); // NOI18N
        ArqueroB.setText("jButton2");
        ArqueroB.setBorderPainted(false);
        ArqueroB.setContentAreaFilled(false);
        ArqueroB.setDefaultCapable(false);
        ArqueroB.setFocusPainted(false);
        ArqueroB.setRequestFocusEnabled(false);
        ArqueroB.setVerifyInputWhenFocusTarget(false);
        ArqueroB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ArqueroBActionPerformed(evt);
            }
        });
        getContentPane().add(ArqueroB, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 190, 150, 200));

        MagoB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Multimedia/Mago.png"))); // NOI18N
        MagoB.setText("jButton3");
        MagoB.setBorderPainted(false);
        MagoB.setContentAreaFilled(false);
        MagoB.setDefaultCapable(false);
        MagoB.setFocusPainted(false);
        MagoB.setFocusable(false);
        MagoB.setRequestFocusEnabled(false);
        MagoB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MagoBActionPerformed(evt);
            }
        });
        getContentPane().add(MagoB, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 210, 120, 170));

        CaballeroB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Multimedia/Caballero.png"))); // NOI18N
        CaballeroB.setText("jButton1");
        CaballeroB.setBorderPainted(false);
        CaballeroB.setContentAreaFilled(false);
        CaballeroB.setDefaultCapable(false);
        CaballeroB.setFocusPainted(false);
        CaballeroB.setFocusable(false);
        CaballeroB.setRequestFocusEnabled(false);
        CaballeroB.setVerifyInputWhenFocusTarget(false);
        CaballeroB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CaballeroBActionPerformed(evt);
            }
        });
        getContentPane().add(CaballeroB, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 230, 140, 160));

        jLabel2.setBackground(new java.awt.Color(102, 102, 0));
        jLabel2.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("SELECCIONE LOS PERSONAJES PARA ESTA RONDA");
        jLabel2.setBorder(new javax.swing.border.MatteBorder(null));
        jLabel2.setDoubleBuffered(true);
        jLabel2.setFocusCycleRoot(true);
        jLabel2.setOpaque(true);
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 130, 410, 30));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/91WLVxaIU8L.jpg"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -90, 1210, 700));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 870, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 10, 870, 500));

        setSize(new java.awt.Dimension(1041, 555));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void ArqueroBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ArqueroBActionPerformed
        String cantidad = JOptionPane.showInputDialog("Ingrese la cantidad de unidades que desea desplegar de este campeon");
        int cantidadN = Integer.parseInt(cantidad);
        if (unidadesDesplegadas + cantidadN > 4) {
            JOptionPane.showMessageDialog(null, "No se pueden desplegar mas de 4 Unidades");
        }else{
            unidadesDesplegadas += cantidadN;
            for (int i = 0; i< cantidadN; i++){
                listaC.agregar(new Personaje("Arquero",1.0,"Roca"));
            }
        }
        //listaC.imprimir();        
    }//GEN-LAST:event_ArqueroBActionPerformed

    private void CaballeroBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CaballeroBActionPerformed
        String cantidad = JOptionPane.showInputDialog("Ingrese la cantidad de unidades que desea desplegar de este campeon");
        int cantidadN = Integer.parseInt(cantidad);
        if (unidadesDesplegadas + cantidadN >4){
            JOptionPane.showMessageDialog(null, "No se pueden desplegar mas de 4 Unidades");
        }else{
            unidadesDesplegadas += cantidadN;
            for (int i = 0; i< cantidadN; i++){
                listaC.agregar(new Personaje("Caballero",2.0,"Papel"));
            }    
        }
        //listaC.imprimir();
    }//GEN-LAST:event_CaballeroBActionPerformed

    private void MagoBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MagoBActionPerformed
       String cantidad = JOptionPane.showInputDialog("Ingrese la cantidad de unidades que desea desplegar de este campeon");
        int cantidadN = Integer.parseInt(cantidad);
        if (unidadesDesplegadas + cantidadN >4){
            JOptionPane.showMessageDialog(null, "No se pueden desplegar mas de 4 Unidades");
        }else{
            unidadesDesplegadas += cantidadN; 
            for (int i = 0; i< cantidadN; i++){
                listaC.agregar(new Personaje("Mago",1.5,"Tijera"));
            }   
        }
        //listaC.imprimir();
    }//GEN-LAST:event_MagoBActionPerformed

    private void ContinuarBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContinuarBActionPerformed
        if (unidadesDesplegadas < 4 || !listaC.estaVacia()){
            JOptionPane.showMessageDialog(null, "No se puede continuar sin 4 unidades elegidas.");            
        }else{         
            Juego PJP  = new Juego();
            agregarUnidadesAleatoriasCPU();
            listaCCPU.imprimir();
            PJP.setVisible(true);
            this.dispose();      
        }        
    }//GEN-LAST:event_ContinuarBActionPerformed

    private void DerechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DerechaActionPerformed
    Personaje eliminado = listaC.eliminarPrimero();
    if (eliminado == null) {
        JOptionPane.showMessageDialog(null, "La lista está vacía");
    } else {
        String[] opciones = {"Camino de la Izquierda", "Camino de la Derecha"};
        int seleccion = JOptionPane.showOptionDialog(null, "Seleccione la cola a la que desea agregar el personaje", "Seleccionar Cola", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, opciones, opciones[0]);
        switch (seleccion) {
            case 0: // Jugador Izquierda
                colaIzq.encolar(eliminado);
                break;
            case 1: // Jugador Derecha
                colaDer.encolar(eliminado);
                break;
            default:
                break;
        }
    }
    //colaDer.imprimir();
    //colaIzq.imprimir();
    //listaC.imprimir();
        
    }//GEN-LAST:event_DerechaActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ArqueroB;
    private javax.swing.JButton CaballeroB;
    private javax.swing.JButton ContinuarB;
    private javax.swing.JButton Derecha;
    private javax.swing.JButton MagoB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
